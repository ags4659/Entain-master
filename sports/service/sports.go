package service

import (
	"git.neds.sh/matty/entain/sports/db"
	"git.neds.sh/matty/entain/sports/proto/sports"
	"golang.org/x/net/context"
)

type Sports interface {
	// ListEvents will return a collection of events.
	ListEvents(ctx context.Context, in *sports.ListEventsRequest) (*sports.ListEventsResponse, error)
}

// SportsService implements the Sports interface.
type SportsService struct {
	SportsRepo db.SportsRepo
	sports.UnimplementedSportsServer
}

// NewSportsService instantiates and returns a new SportsService.
func NewSportsService(sportsRepo db.SportsRepo) Sports {
	return &SportsService{SportsRepo: sportsRepo}
}

func (s *SportsService) ListEvents(ctx context.Context, in *sports.ListEventsRequest) (*sports.ListEventsResponse, error) {
	events, err := s.SportsRepo.List(in.Filter)
	if err != nil {
		return nil, err
	}

	return &sports.ListEventsResponse{Events: events}, nil
}

// mustEmbedUnimplementedSportsServer is a dummy method that embeds the
// UnimplementedSportsServer generated by the protobuf compiler.
func (s *SportsService) mustEmbedUnimplementedSportsServer() {}
